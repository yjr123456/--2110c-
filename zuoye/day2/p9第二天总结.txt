/**
 * enum的详解
 * 1.总结: 每次手动添加索引的时候,下面数据如果不是手动添加的索引,将会以递增的方式,把索引展示出来
 * 2. 数字类型,我们可以像访问对象一样使用',' 和 '[]'两种方式访问里面的值
 * 3. 字符串枚举的特点:含字符串值成员的枚举中不允许使用计算值,且必须是字符串类型的。
 *    枚举成员必须具有初始化表达式。
 * 
 */

/**
 * ---数字类型的定义
 *  /**
     * 数字类型
     * 1. 语法使用的是es6的语法,Uploading: Uploading
     * 2. 自动添加指定索引符合
     * 3. 我们可以像访问对象一样使用',' 和 '[]'两种方式访问里面的值
     */


 enum Status {
    Uploading,
    Success,
    Falied
}
//像访问对象一样使用',' 
console.log(Status.Falied);
console.log(Status['Falied']);
console.log(Status.Success);


/**
 * 指定索引值
 * 总结: 每次手动添加索引的时候,下面数据如果不是手动添加的索引,将会以递增的方式,把索引展示出来
 */

enum Anmimal {
    /**猪 */
    Pig = 200,
    /**狗 */
    Dog,
    /**猫 */
    Cat = 300,
    /**蛇 */
    Snake
}
console.log(Anmimal.Cat);
console.log(Anmimal['Dog']);
console.log(Anmimal.Snake);


//-------------计算值

const getvalue = () => {
    return  1
}

// 3.计算值和常量
enum Constant {
    a = getvalue(),
    b, // 枚举成员必须具有初始化表达式。
    c,
}


/**
 * 4. 反向映射
 */

 enum Statuss {
    Success = 200,
    NotFound = 404,
    Error = 500
 }

 console.log(Statuss.Error);
 console.log(Statuss[404]);
 console.log(Statuss.NotFound);

 /**
  * 5.字符串枚举
  */
 /**
  * 字符串枚举
  */

  const getValue = () => {
    return 0
 }

 const names = '小明'
 enum Message {
    /**错误信息 */
    Error = 'error message',
    /**成功的错误信息 
     * 枚举成员必须具有初始化表达式。
    */
    SuccessError = 200, // 枚举成员必须具有初始化表达式。
    // 含字符串值成员的枚举中不允许使用计算值。
    // 含字符串值成员的枚举中不允许使用计算值。
    ClientError = names
 }

 console.log(Message.SuccessError,'SuccessError')
 console.log(Message.Error);
 console.log(Message['ClientError']);


 /**
  * 6.异构枚举
  */
  enum Result {
    Faild = 0,
    Success = "Success"
 }

 /**
  * 7.枚举成员类型
  */
 /**
  * 枚举成员类型
  */

  enum Animal{
    Dog = 1,
    Cat = 2,
 }

 /**
  * 狗
  */
 interface Dog {
    type: Animal.Dog
 }

 /**
  * 猫
  */
 interface Cat {
    type: Animal.Cat
 }

 let cat1: Cat = {
    type: Animal.Dog // error [ts] 不能将类型“Animal.Dog”分配给类型“Animal.Cat”
  };
  let dog: Dog = {
    type: Animal.Dog
  };

  /**
   * 联合类型
   */

  enum Keys{
    /**关闭 */
    Off,
    On
  }

  interface Light{
    status: Keys
  }

  let light: Light = {
    status: Keys.Off
  }


/**
 * 运行时对象
 */
 enum E {
    A,
    B
  }
  const getIndex = (enumObj: { C: number }): number => {
    return enumObj.C;
  };
  console.log(getIndex(E)); // 0


  /**
   * const enum
   */

  /**
 * const enum
 */
enum Animal {
    Rabbit,
    Pig
}

const enum Light90 {
   Off,
   On
}

const status45 = Animal.Pig
const status57 = Light90.Off
console.log(status45,status57);


**
 * 总结一下
 * 1. interface
 * 2. 可选属性 ?
 * 3. [prop: string]: any;
 * 4. 多余属性的检查
 */
/**
 * interface
 * 我们需要定义这样一个函数，参数是一个对象，里面包含两个字段：firstName 和 lastName，也就是英文的名和姓，然后返回一个拼接后的完整名字
 */
//  interface Persion {
//     firstName: string, 
//     lastName: string,
//     age: number,
//     sex: boolean,
//     color: string
//  }
/**
 * 
 * @param param0 
 * @returns 
 */
function getFullName({firstName,lastName, age, sex}: Persion): string {
    return `My name ${lastName} ${firstName}, My age is ${age}, like smoke, ${sex}`
}
/**
 * 第一种: 什么参数都不传 -----应有 1 个参数，但获得 0 个
 * 第二种: 我们传递错误参数, ----- 对象文字可以只指定已知属性，并且“age”不在类型“{ firstName: string; lastName: string; }”中。
 * 第三种: 我们传递的参数个数不一样  -- 类型“{ firstName: string; lastName: string; }”的参数不能赋给类型“Persion”的参数。
  类型“{ firstName: string; lastName: string; }”缺少类型“Persion”中的以下属性: age, sex
 */
//let result = getFullName({firstName: 'world', lastName: 'hello'})
// console.log(result);
// let result = getFullName({firstName: '三', lastName: '张', age: 20, sex:false})
//document.body.innerHTML = result
//console.log(result);
/**
 * 可选属性 ? 
 */
 interface Persion {
    firstName: string, 
    lastName: string,
    age: number,
    sex: boolean,
    colors?: string,
    [prop: string]: any
 }
 let result = getFullName({firstName: '三', lastName: '张', age: 20, sex:false, height: 123})

 /**
  * 绕开多余属性的检查,类型断言  !!!!!
  * 1. 类型断言 as <>
  * 2. [props: string]: any
  */
// interface Vegetables{
//    color?: string,
//    type: string
// }
// const getVegetables = ({color, type}: Vegetables) : string => {
//    return  `A ${color? color + "" : " "}${type}`
// }
// getVegetables({
//    type: "tomato",
//    size: 12,
//    price: 1.2
//  } as Vegetables);
 interface Vegetables{
   color?: string,
   type: string,
   [props: string]: any
}
// const getVegetables = ({color, type}: Vegetables) : string => {
//    return  `A ${color? color + "" : " "}${type}`
// }
// getVegetables({
//    type: "tomato",
//    size: 12,
//    price: 1.2
//  });
 /**
  * 利用类型兼容性
  */
  interface Vegetables {
   type: string;
 }
 const getVegetables = ({ type }: Vegetables) => {
   return `A ${type}`;
 };
 
 const option = { type: "tomato", size: 12 };
 getVegetables(option);
 /**
  * 只读属性
  * readonly
  */
 interface Role {
   readonly 0: string;
   readonly 1: string;
 }
 const role: Role = {
   0: 'super_admin',
   1: 'admin'
 }
 role[1] = '我是快乐的';// 无法分配到 "1" ，因为它是只读属性
 /**
  * const 和 readonly  对比
  */
 const NAME: string = "帅字辈";
// NAME = "抬头" // 无法分配到 "NAME" ，因为它是常数。
const obj = {
   name: '帅字辈'
}
obj.name = "包胜利"
interface Info {
   readonly name: string
}
const info: Info = {
   name: '帅字辈'
}
info['name'] = "包胜利" // 无法分配到 "name" ，因为它是只读属性
/**
 * 类型别名
 */
interface AddFunc {
   (num1: number, num2: number) : number
}
const add: AddFunc = (n1, n2) => n1 + n2;
const join: AddFunc = (n1, n2) => `${n1} ${n2}`; // 不能将类型'string'分配给类型'number'
add("a", 2); // 类型'string'的参数不能赋给类型'number'的参数

 /* TODO: 
 * 1. 没有只读属性,设置并修改 
 * 2. 为什么const 声明的对象可以修改呀
 *
 */
