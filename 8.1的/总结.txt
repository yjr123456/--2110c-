vue3的介绍
1.vue:渐进式框架，主张就是只负责自己的事情，vue被设计为可以自底向上逐层应用，vue的核心库只关注图层，
不仅易于上手，还便于与第三方库或既有项目整合，再不同层次可以使用不同的概念

2.vue的优势：
【1】vue的主要特点就是响应式机制，模板，以及对象式的组件声明语法，而3.0对这三部分都做了更改
【2】性能更好
【3】体积更小
【4】更好的ts支持
【5】更好的代码组织
【6】更好的逻辑抽离
【7】更多新的功能
3.vue带来了什么？
【1】性能的提升
        *打包大小减少41%
        *初次渲染快55%
        *内存减少54%
         .....
【2】代码源的升级
         *使用proxy代替defineproperty实现响应式
         *重写虚拟Dom的实现和tree-shaking
【3】拥抱TypeScript
        vue3可以更好的支持TypeScript
【4】新的特性
        1.Composition Api(组合Api)
           *setup配置
           *ref与reactive
           *watch与wacthEffect
           *provide与inject
        2.新的内置组件
             Frsgment
             Teleport
             Suspense
        3.其他改变
             *新的生命周期钩子
             *data选项应始终被声明一个函数
             *移除keyCode支持作为v-on的修饰符
vite 的介绍
vite是新一代的前端构建工具
优势：
1.开发环境中，无需打包操作，可快速的冷启动
2.轻量快速的热重载
3.真正的按需编译，不再等待整个应用编译完成

组成：主要由两部分组成
1.一个开发服务器，它基于原生Es模块提供了丰富的内建功能，如速度快到惊人的模块热更新{HMR}
2.一套构建指令，它使用Bollup打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源

vite意义在于提供了开箱即用的配置，同时它的插件API和JavaScript带来了高度的可扩展性，并有完整的类型支持


setup
1.理解：vue3.0中一个新的配置，值为一个函数，
2.组件所用到的数据，方法等，都需要配置再setup中

setup返回值有两种：
   1.若返回一个对象，则对象中的属性，方法，在模板中均可直接使用。
   2.若返回一个渲染函数，则可以中调用渲染内容

注意：
  1.尽量不要与vue2x配置使用
   vue2x配置【data,methods,computed...】中可以访问到setup中的属性，方法。但在setup中不能访问到vue2x配置
   如果有重名，setup优先
  2.setup不能是一个async函数，因为返回值不再是return的对象，而是promise模板看不到return对象中的属性


vue3特点：
1.vue3是声明函数式调用，而不是构造函数，创建实例
2.绑定方式不一样
3.渲染没有显示的render渲染
4.vue3的语法向下不兼容
5.不需要根组件的包裹，可以直接使用

ref函数
作用：定义一个响应式数据
语法：const xxx=ref(value)
   创建一个包含响应式数据的引用对象，
   操作数据写法：xxx.value
   模板读取数据，不需要value,直接<div>{{xxx}}</div>
  

reactive函数
作用：定义一个对象类型的响应式数据,
语法：const 代理对象=reactive(源对象)
  reactive 定义的响应式数据是深层次的，
 内部基于es6的proxy实现，通过代理对象操作源对象内部数据进行操作